#!/bin/bash

# Script de d√©ploiement pour Medical Diagnosis AI
# Usage: ./deploy.sh [production|staging]

set -e

ENVIRONMENT=${1:-production}
echo "üöÄ D√©ploiement en mode: $ENVIRONMENT"

# V√©rifier que git est configur√©
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Erreur: Ce n'est pas un repository git"
    exit 1
fi

# V√©rifier que tous les fichiers sont commit√©s
if ! git diff-index --quiet HEAD --; then
    echo "‚ùå Erreur: Il y a des modifications non commit√©es"
    echo "Veuillez commiter vos changements avant le d√©ploiement"
    exit 1
fi

# V√©rifier que la branche est main/master
CURRENT_BRANCH=$(git branch --show-current)
if [[ "$CURRENT_BRANCH" != "main" && "$CURRENT_BRANCH" != "master" ]]; then
    echo "‚ö†Ô∏è  Attention: Vous n'√™tes pas sur la branche main/master"
    echo "Branche actuelle: $CURRENT_BRANCH"
    read -p "Continuer quand m√™me ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# V√©rifier les fichiers de configuration
echo "üìã V√©rification des fichiers de configuration..."

REQUIRED_FILES=(
    "requirements.txt"
    "app.py"
    "database.py"
    "models.py"
    "auth.py"
    "report_generator.py"
    "gunicorn.conf.py"
    "Procfile"
    "runtime.txt"
    "render.yaml"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [[ ! -f "$file" ]]; then
        echo "‚ùå Erreur: Fichier manquant: $file"
        exit 1
    fi
done

echo "‚úÖ Tous les fichiers requis sont pr√©sents"

# V√©rifier les variables d'environnement
echo "üîß V√©rification des variables d'environnement..."

if [[ -f ".env" ]]; then
    echo "‚úÖ Fichier .env trouv√©"
else
    echo "‚ö†Ô∏è  Fichier .env non trouv√©"
    echo "Assurez-vous de configurer les variables d'environnement sur Render"
fi

# Tests de base
echo "üß™ Ex√©cution des tests de base..."

# Test de syntaxe Python
echo "  - Test de syntaxe Python..."
python -m py_compile app.py
python -m py_compile database.py
python -m py_compile models.py
python -m py_compile auth.py
python -m py_compile report_generator.py

# Test d'import des modules
echo "  - Test d'import des modules..."
python -c "
import app
import database
import models
import auth
import report_generator
print('‚úÖ Tous les modules s\'importent correctement')
"

echo "‚úÖ Tests de base r√©ussis"

# Pr√©paration du d√©ploiement
echo "üì¶ Pr√©paration du d√©ploiement..."

# Cr√©er un tag de version
VERSION=$(date +"%Y%m%d-%H%M%S")
git tag "v-$VERSION"
echo "üè∑Ô∏è  Tag cr√©√©: v-$VERSION"

# Push vers le repository distant
echo "üì§ Push vers le repository distant..."
git push origin $CURRENT_BRANCH
git push origin "v-$VERSION"

echo "‚úÖ D√©ploiement pr√©par√© avec succ√®s!"
echo ""
echo "üìã Prochaines √©tapes:"
echo "1. Allez sur https://dashboard.render.com"
echo "2. Cr√©ez un nouveau service web"
echo "3. Liez votre repository GitHub"
echo "4. Configurez les variables d'environnement:"
echo "   - SECRET_KEY"
echo "   - MONGO_URI"
echo "   - CLOUDINARY_CLOUD_NAME"
echo "   - CLOUDINARY_API_KEY"
echo "   - CLOUDINARY_API_SECRET"
echo "   - HUGGINGFACE_API_KEY"
echo "   - ADMIN_PASSWORD"
echo "5. D√©ployez!"
echo ""
echo "üîó Votre application sera disponible sur: https://votre-app.onrender.com"
echo ""
echo "üìä Pour v√©rifier le d√©ploiement:"
echo "curl https://votre-app.onrender.com/health" 